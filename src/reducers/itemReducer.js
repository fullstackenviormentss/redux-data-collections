import { combineReducers } from 'redux'
import { handleActions } from 'redux-actions'
import reduceReducers from 'reduce-reducers'
import uuid from 'uuid/v4'
import relationshipsReducer from './relationshipsReducer'
import {
  REDUX_DATA_ITEM_CREATE_NEW,
  REDUX_DATA_ITEM_SAVE,
  REDUX_DATA_ITEM_ATTRIBUTES_MAP,
  REDUX_DATA_ITEM_ATTRIBUTES_ROLLBACK,
  REDUX_DATA_ITEM_ATTRIBUTES_SET,
  REDUX_DATA_ITEM_ATTRIBUTE_SET,
  REDUX_DATA_ITEM_ATTRIBUTE_RESET,
  REDUX_DATA_ITEM_ATTRIBUTE_TOGGLE,
  REDUX_DATA_ITEM_ATTRIBUTE_DELETE
} from '../constants/itemConstants'

// TODO: move to another file
// TODO: mark in meta.changedAttributes
const attributeReducer = handleActions({
  [REDUX_DATA_ITEM_ATTRIBUTE_SET]: (state, action) => action.payload.value,
  [REDUX_DATA_ITEM_ATTRIBUTE_RESET]: (state, action) => state, // TODO: pull from meta.changedAttributes
  [REDUX_DATA_ITEM_ATTRIBUTE_TOGGLE]: (state, action) => !state,
  [REDUX_DATA_ITEM_ATTRIBUTE_DELETE]: (state, action) => undefined
}, '')

const mapActionToAttributeReducer = (state, action) => {
  action.type === undefined && console.log(action)
  const { payload } = action
  if (!payload) { return state }

  const { attribute } = payload
  if (!attribute) { return state }

  return {
    ...state,
    [attribute]: attributeReducer(state[attribute], action)
  }
}

// TODO: move to another file
const attributesReducer = handleActions({
  [REDUX_DATA_ITEM_ATTRIBUTES_MAP]: (state, action) => {
    if (!action) { return state }
    const { payload } = action
    if (!payload) { return state }
    const { map } = payload
    const keys = Object.keys(state)
    return keys.map(key => map(state[key], key, state)).reduce((attributes, value, i) => {
      attributes[keys[i]] = value
      return attributes
    }, {})
  },
  [REDUX_DATA_ITEM_ATTRIBUTES_ROLLBACK]: (state, action) => {
    console.log(REDUX_DATA_ITEM_ATTRIBUTES_ROLLBACK)
    return state
  },
  // TODO: REDUX_DATA_ITEM_ATTRIBUTES_SET -- set many
  [REDUX_DATA_ITEM_ATTRIBUTE_SET]: mapActionToAttributeReducer,
  [REDUX_DATA_ITEM_ATTRIBUTE_RESET]: mapActionToAttributeReducer,
  [REDUX_DATA_ITEM_ATTRIBUTE_TOGGLE]: mapActionToAttributeReducer,
  [REDUX_DATA_ITEM_ATTRIBUTE_DELETE]: mapActionToAttributeReducer
}, {})

const identityReducer = (initialState = {}) => (state = initialState) => state

const itemReducer = handleActions({
  [REDUX_DATA_ITEM_CREATE_NEW]: (state, action) => {
    const { payload } = action
    if (!payload) { return state }
    const { type } = payload
    const item = { ...state, meta: state.meta || {} }

    item.meta.isNew = true

    if (!item.id) {
      item.id = uuid()
      item.meta.hasAutogeneratedId = true
    }

    if (!item.type) {
      item.type = type
    }

    return item
  },

  // TODO: save should really be happening in the middleware
  [REDUX_DATA_ITEM_SAVE]: (state, action) => {
    const { payload } = action
    if (!payload) { return state }
    const { changedAttributes } = state.meta
    const item = {
      ...state,
      attributes: { ...state.attributes, ...changedAttributes },
      meta: {
        ...state.meta,
        changedAttributes: {},
        isSaved: true
      }
    }

    return item
  },
  [REDUX_DATA_ITEM_ATTRIBUTES_ROLLBACK]: (state, action) => {
    const { payload } = action
    if (!payload) { return state }
    const item = {
      ...state,
      meta: { ...state.meta, changedAttributes: {} }
    }

    return item
  },
  [REDUX_DATA_ITEM_ATTRIBUTES_SET]: (state, action) => {
    const { payload } = action
    if (!payload) { return state }
    const { attributes } = payload
    const { changedAttributes } = state.meta

    return {
      ...state,
      meta: {
        ...state.meta,
        changedAttributes: {
          ...changedAttributes,
          ...attributes
        },
        isSaved: false
      }
    }
  }
}, {})

export default reduceReducers(
  itemReducer,
  combineReducers({
    type: identityReducer(''),
    id: identityReducer(''),
    attributes: attributesReducer,
    relationships: relationshipsReducer,

    // TODO: meta
    meta: identityReducer()
  })
)
